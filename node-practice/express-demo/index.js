const home = require('./routes/home');   // don't forget to call it in 'app.use()' below in MIDDLEWARE... same like in 'const courses'
const courses = require('./routes/courses');   // for structuring our express app, we are importing it from another module...
const startupDebugger = require('debug')('app:startup');   // this require command returns a function, we call this function and give it an argument... this argument is an arbitrary namespace that we define for debugging... awesome... 
const dbDebugger = require('debug')('app:db');   // we can have another debugger to debug database related messages... this will return a debugging function ... 
const config = require('config');
const helmet = require('helmet');
const morgan = require('morgan');
const Joi = require('joi');   // makes input validation easy...
const logger = require('./middleware/logger');   // custom Middleware function remember... express is nothing but Technically a bunch of middleware functions lol... 
const authenticator = require('./authenticator');   // custom Middleware function to authenticate user... 
const express = require('express');
const app = express();


// // Project ENVIRONMENT... 
// console.log(`NODE_ENV: ${process.env.NODE_ENV}`);   // set to "undefined" by default... 'NODE_ENV'--> returns environment variable for this node application... 
// console.log(`app: ${app.get('env')}`);   // gets environment... set to "development" by default... 


// set VIEW ENGINE for the application... npm i pug... 
app.set('view engine', 'pug');   // when we set this, express will internally load this module... *** no need to 'require' it... 
app.set('views', './views');   // default... all 'views' will be stored in views folder... do this when you want to overwrite the template... so now lets add a new folder called 'views'... where all file for view engine will be stored... 


// All MIDDLEWARES... all types include --> built-in, 3rd Party, and custom... 
app.use(express.json());   // allows for Json parsing... not set by default by express... we need it to parse the request below... here-->  "name: req.body.name"
app.use(express.urlencoded({ extended: true }));   // another middleware function... this middleware function parses incoming req with url encoded payloads... "key=value&key=value"... with the extended part we can pass arrays and complex objects... 
app.use(express.static('public'));   // the last build-in middleware function we have in Express is "static"... we use this to serve static files... we use the folder "public" and put in static files like ".css", "images", and so on...
app.use(logger);   // custom middleware... see logger.js
app.use(authenticator);   // custom middleware... see authenticator.js
app.use(helmet());   // this is 3rd party middleware for Express... see how we using app.use...which is express call LOL... FUNCTION--> Helmet helps you secure your Express apps by setting various HTTP headers.
app.use('/api/courses', courses);   // basically telling express that wherever you see this route -> /api/courses... to use courses.js router.... // we need to call app.use after importing 'courses.js'.... // here basically we are telling express that any routes that starts with /api/courses use this router... 
app.use('/', home);


// CONFIGURATION ---> goes hand-in-hand with Environment... remember we used morgan('tiny')... to get env info... it basically change the display output to the config folder setup... for eg. when you change the env with "export NODE_ENV=development"
console.log('Application Name: ' + config.get('name'));   // uses config npm package... to get name
console.log('Mail Server: ' + config.get('mail.host'));   // we will access the .json file and go into mail.host object
console.log('Mail Password: ' + config.get('mail.password'));   // we are getting password from "custom-environment-variables.json" file... This command looks at various sources to find value for this "mail.password" configuration... it could be a config file, a json file, an env variable, or command line argument [what the heeeeellll...awesome!!]... 


// // *** 3rd Party middleware for Express.... see also helmet above... 
// // app.use(morgan('tiny'));   // this is 3rd party middleware for Express... see how we using app.use...which is express call LOL... FUNCTION--> HTTP request logger middleware for node.js
// if (app.get('env') === 'development') {   // if on ENV equals 'development' then run morgan... we can set 'env' to any thing LOL... just type in commandLine--> "export NODE_ENV=development"
//     app.use(morgan('tiny'));
//     console.log('Morgan enabled...');
// }


// DEBUGGING... using the above "3rd Party middleware for Express"-> morgan example but making some tweeks...
if (app.get('env') === 'development') {
    app.use(morgan('tiny'));
    startupDebugger('Debugger enabled...');   // used along with morgan... 
}
// Db Work... Look above in require section... potentially somewhere in the app we might have DB work... 
dbDebugger('Connected to the database...');


// PORT - it is unlikely that our hosting port will be 3000... therefore to set it dynamically we use this process.env method... 
const port = process.env.PORT || 3000;
app.listen(port, () => {   // we set a listener... 
    console.log(`Listening on PORT ${port}...`);
});